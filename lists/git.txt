vim $DOTFILES_DIR/lists/git.txt                                                                 # EDIT
git branch | fzf | xargs git checkout \n                                                        # CHECKOUT
open $(git config --get remote.origin.url | sed 's|.git$||' | xargs -I {} echo "{}/")           # PROJECT
open $(git config --get remote.origin.url | sed 's|.git$||' | xargs -I {} echo "{}/pulls")      # PRS
open $(git config --get remote.origin.url | sed 's|.git$||' | xargs -I {} echo "{}/actions")    # ACTIONS
open $(git config --get remote.origin.url | sed 's|.git$||' | xargs -I {} echo "{}/release")    # RELEASE
sh $DOTFILES_DIR/scripts/generate_github_link.sh                                                # FILE
git log --graph --oneline --all --decorate                                                      # SHOW LOG
git remote get-url origin | xargs -I {} echo -n {} | pbcopy                                     # ORIGIN
git reset --soft HEAD^                                                                          # SOFT RESET
echo -n "Commit Message: " && read MESSAGE && git commit -m "$MESSAGE"                          # COMMIT
git blame $(find . | fzf)                                                                                # GIT BLAME
git log --oneline                                                                               # LOG ONELINE
git log --graph --all                                                                           # LOG GRAPH
git diff --stat                                                                                 # DIFF
git commit --amend                                                                              # AMEND
git clone <repository>                                                                          # CLONE
git status                                                                                      # STATUS
echo -n "Add file: " && read $(find . | fzf) && git add <file>                                  # ADD FILE
git diff --staged $(git diff --name-only --staged | fzf)                                        # SHOW STAGED DIFFS IN A FILE
git diff --staged --stat                                                                        # SHOW STAGED DIFF
git push                                                                                        # PUSH
git push --force                                                                                # FORCE PUSH
git pull                                                                                        # PULL
git fetch <remote>                                                                              # FETCH
git branch                                                                                      # BRANCH
git checkout <branch>                                                                           # CHECKOUT
git merge <branch>                                                                              # MERGE
git log                                                                                         # LOG
git diff                                                                                        # DIFF
git reset <file>                                                                                # RESET FILE
git rm <file>                                                                                   # REMOVE FILE
git stash                                                                                       # STASH
git stash pop                                                                                   # STASH POP
git remote -v                                                                                   # REMOTE
git tag <tag-name>                                                                              # TAG
git add .                                                                                       # ADD ALL
